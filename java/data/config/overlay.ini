[Meta]
rfDynHUD_Version        = "1.0.1 (build 69)"
Design_Resolution       = "1920x1200"
Design_Grid             = "(0,0;10,10)"

[NamedColors]
ETVCaptionBackgroundColor = #787878
ETVCaptionBackgroundColor1st = #B10000
ETVCaptionFontColor     = #FFFFFF
ETVDataBackgroundColor  = #000000
ETVDataBackgroundColor1st = #640000
ETVDataBackgroundColorFaster = #008800
ETVDataBackgroundColorFastest = #C000D2
ETVDataBackgroundColorSlower = #BAB802
ETVDataFontColor        = #FFFFFF
ETVDataFontColorFaster  = #FFFFFF
ETVDataFontColorFasterst= #000000
ETVDataFontColorSlower  = #000000
PositionItemColorLeader = #FF0000C0
PositionItemColorMe     = #00FF00C0
PositionItemColorNextBehind = #FFFF00C0
PositionItemColorNextInFront = #0000FFC0
PositionItemColorNormal = #FFFFFFC0
PositionItemFontColor   = #000000
StandardBackground      = #00000096
StandardFontColor       = #C0BC3D

[NamedFonts]
BiggerFont              = "Monospaced-BOLD-14va"
ETVFont                 = "Verdana-PLAIN-16va"
GearFont                = "Monospaced-BOLD-26va"
PositionItemFont        = "Verdana-BOLD-9va"
SmallerFont             = "Monospaced-BOLD-9va"
SmallerFont3            = "Monospaced-BOLD-13va"
StandardFont            = "Monospaced-BOLD-13va"
StandardFont2           = "Monospaced-BOLD-12va"
StandardFont3           = "Monospaced-BOLD-11va"

[BorderAliases]
StandardBorder          = "backgroundcolor_border.ini"

[Widget::MiscWidget1]
class                   = "net.ctdp.rfdynhud.widgets.misc.MiscWidget" // The Java class, that defines the Widget.
positioning             = TOP_CENTER         // The way, position coordinates are interpreted (relative to). Valid values: TOP_LEFT, TOP_CENTER, TOP_RIGHT, CENTER_LEFT, CENTER_CENTER, CENTER_RIGHT, BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT.
x                       = 0.0%               // The x-coordinate for the position.
y                       = 11.230469%         // The y-coordinate for the position.
width                   = -44.82422%         // The width. Use negative values to make the Widget be sized relative to screen size.
height                  = 6.0546875%         // The height. Use negative values to make the Widget be sized relative to screen size.
border                  = "StandardBorder"   // The widget's border.
initialVisibility       = true               // The initial visibility.
backgroundColor         = "StandardBackground" // The Widget's background color in the format #RRGGBBAA (hex).
font                    = "StandardFont"     // The used font.
fontColor               = "StandardFontColor" // The Widget's font color in the format #RRGGBB (hex).
displayScoring          = true               // Display the scoring part of the Widget?
displayTiming           = true               // Display the timing part of the Widget?
lapDisplayType          = CURRENT_LAP        // The way the laps are displayed. Valid values: CURRENT_LAP, LAPS_DONE.
displayVelocity         = true               // Display the velocity and top speed part of the Widget?
relTopspeedResetDelay   = 10000              // The delay after which the relative topspeed is resetted (in milliseconds).

[Widget::TemperaturesWidget1]
class                   = "net.ctdp.rfdynhud.widgets.temperatures.TemperaturesWidget" // The Java class, that defines the Widget.
positioning             = TOP_RIGHT          // The way, position coordinates are interpreted (relative to). Valid values: TOP_LEFT, TOP_CENTER, TOP_RIGHT, CENTER_LEFT, CENTER_CENTER, CENTER_RIGHT, BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT.
x                       = 0.5859375%         // The x-coordinate for the position.
y                       = 14.453125%         // The y-coordinate for the position.
width                   = 17.773438%         // The width. Use negative values to make the Widget be sized relative to screen size.
height                  = 26.464844%         // The height. Use negative values to make the Widget be sized relative to screen size.
border                  = "StandardBorder"   // The widget's border.
initialVisibility       = true               // The initial visibility.
backgroundColor         = "StandardBackground" // The Widget's background color in the format #RRGGBBAA (hex).
font                    = "StandardFont"     // The used font.
fontColor               = "StandardFontColor" // The Widget's font color in the format #RRGGBB (hex).
font2                   = "SmallerFont"      // The used (smaller) font.
displayEngine           = true               // Display the engine part of the Widget?
displayWaterTemp        = false              // Display water temperature?
engineHeight            = 9.9609375%         // The height of the engine bar.
displayTires            = true               // Display the tire part of the Widget?
tireWidth               = 10.253906%         // The width of a tire image.
tireHeight              = 10.449219%         // The height of a tire image.
displayBrakes           = true               // Display the brakes of the Widget?
brakeWidth              = 6.7382812%         // The width of a brake image.
brakeHeight             = 19.238281%         // The height of a brake image.
brakeTempsPeekDelay     = 7000               // (in milliseconds) If greater than 0, the brake temperatures will stay on their peek values after a turn for the chosen amount of milliseconds.

[Widget::TimeCompareWidget1]
class                   = "net.ctdp.rfdynhud.widgets.timecomp.TimeCompareWidget" // The Java class, that defines the Widget.
positioning             = TOP_LEFT           // The way, position coordinates are interpreted (relative to). Valid values: TOP_LEFT, TOP_CENTER, TOP_RIGHT, CENTER_LEFT, CENTER_CENTER, CENTER_RIGHT, BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT.
x                       = 0.48828125%        // The x-coordinate for the position.
y                       = 14.6484375%        // The y-coordinate for the position.
width                   = 23.925781%         // The width. Use negative values to make the Widget be sized relative to screen size.
height                  = 14.0625%           // The height. Use negative values to make the Widget be sized relative to screen size.
border                  = "StandardBorder"   // The widget's border.
initialVisibility       = true               // The initial visibility.
backgroundColor         = "StandardBackground" // The Widget's background color in the format #RRGGBBAA (hex).
font                    = "StandardFont"     // The used font.
fontColor               = "StandardFontColor" // The Widget's font color in the format #RRGGBB (hex).
abbreviate              = false              // Whether to abbreviate "Sector" to "Sec", or not.
displaySectors          = true               // Display sector times?

[Widget::ETVSessionStateWidget1]
class                   = "net.ctdp.rfdynhud.etv2010.widgets.sessionstate.ETVSessionStateWidget" // The Java class, that defines the Widget.
positioning             = TOP_CENTER         // The way, position coordinates are interpreted (relative to). Valid values: TOP_LEFT, TOP_CENTER, TOP_RIGHT, CENTER_LEFT, CENTER_CENTER, CENTER_RIGHT, BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT.
x                       = 0.0%               // The x-coordinate for the position.
y                       = 19.042969%         // The y-coordinate for the position.
width                   = 200px              // The width. Use negative values to make the Widget be sized relative to screen size.
height                  = 2.5390625%         // The height. Use negative values to make the Widget be sized relative to screen size.
border                  = N/A                // The widget's border.
initialVisibility       = true               // The initial visibility.
backgroundColor         = "ETVDataBackgroundColor" // The Widget's background color in the format #RRGGBBAA (hex).
font                    = "ETVFont"          // The used font.
fontColor               = "ETVDataFontColor" // The Widget's font color in the format #RRGGBB (hex).
captionBgColor          = "ETVCaptionBackgroundColor" // The background color for the "Lap" caption.
captionColor            = "ETVCaptionFontColor" // The font color for the "Lap" caption.
testDayCaption          = "Lap"              // The caption String (on the left) for the TEST_DAY session.
practice1Caption        = ""                 // The caption String (on the left) for the PRACTICE1 session.
practice2Caption        = "Q1"               // The caption String (on the left) for the PRACTICE2 session.
practice3Caption        = "Q2"               // The caption String (on the left) for the PRACTICE3 session.
practice4Caption        = "Practice4"        // The caption String (on the left) for the PRACTICE4 session.
qualifyingCaption       = "Q3"               // The caption String (on the left) for the QUALIFYING session.
lapDisplayType          = CURRENT_LAP        // The way the laps are displayed. Valid values: CURRENT_LAP, LAPS_DONE.
sessionLimitPreference  = LAPS               // If a session is limited by both laps and time, this limit will be displayed.

[Widget::TimingWidget1]
class                   = "net.ctdp.rfdynhud.widgets.timing.TimingWidget" // The Java class, that defines the Widget.
positioning             = TOP_LEFT           // The way, position coordinates are interpreted (relative to). Valid values: TOP_LEFT, TOP_CENTER, TOP_RIGHT, CENTER_LEFT, CENTER_CENTER, CENTER_RIGHT, BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT.
x                       = 0.48828125%        // The x-coordinate for the position.
y                       = 29.101562%         // The y-coordinate for the position.
width                   = 23.925781%         // The width. Use negative values to make the Widget be sized relative to screen size.
height                  = 30.078125%         // The height. Use negative values to make the Widget be sized relative to screen size.
border                  = "StandardBorder"   // The widget's border.
initialVisibility       = true               // The initial visibility.
backgroundColor         = "StandardBackground" // The Widget's background color in the format #RRGGBBAA (hex).
font                    = "StandardFont"     // The used font.
fontColor               = "StandardFontColor" // The Widget's font color in the format #RRGGBB (hex).
displayAbsFastest       = true               // Display the absolute fastest lap part of the Widget?
cumulativeSectors       = false              // Display the second sector as a sum?
forceCurrentCumulSectors= true               // Display the second sector as a sum even if the others not?
lastLapDisplayDelay     = -85                // The time for which the last driven lap will keepbeing displayed (in milliseconds).
slowerColor             = "#FF7248"          // The font color to use for positive gaps.
fasterColor             = "#6AFF3D"          // The font color to use for negative gaps.

[Widget::ETVTimeCompareWidget1]
class                   = "net.ctdp.rfdynhud.etv2010.widgets.timecompare.ETVTimeCompareWidget" // The Java class, that defines the Widget.
positioning             = TOP_LEFT           // The way, position coordinates are interpreted (relative to). Valid values: TOP_LEFT, TOP_CENTER, TOP_RIGHT, CENTER_LEFT, CENTER_CENTER, CENTER_RIGHT, BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT.
x                       = 37.5%              // The x-coordinate for the position.
y                       = 30.859375%         // The y-coordinate for the position.
width                   = 40.722656%         // The width. Use negative values to make the Widget be sized relative to screen size.
height                  = 8.203125%          // The height. Use negative values to make the Widget be sized relative to screen size.
border                  = N/A                // The widget's border.
initialVisibility       = true               // The initial visibility.
backgroundColor         = "ETVDataBackgroundColor" // The Widget's background color in the format #RRGGBBAA (hex).
font                    = "ETVFont"          // The used font.
fontColor               = "ETVDataFontColor" // The Widget's font color in the format #RRGGBB (hex).
captionBgColor          = "ETVCaptionBackgroundColor" // The background color for the "Lap" caption.
captionColor            = "ETVCaptionFontColor" // The font color for the "Lap" caption.
captionBgColor1st       = "ETVCaptionBackgroundColor1st" // The background color for the "Position" caption for first place.
dataBgColor1st          = "ETVDataBackgroundColor1st" // The background color for the data area, for first place.
dataBgColorFastest      = "ETVDataBackgroundColorFastest" // The background color for the data area, if a driver made the absolute fastest lap.
dataBgColorFaster       = "ETVDataBackgroundColorFaster" // The background color for the data area, if a negative gap is displayed.
dataBgColorSlower       = "ETVDataBackgroundColorSlower" // The background color for the data area, if a positive gap is displayed.
dataColorFastest        = "ETVDataFontColorFasterst" // The font color for the data area, if a driver made the absolute fastest lap.
dataColorFaster         = "ETVDataFontColorFaster" // The font color for the data area, if a negative gap is displayed.
dataColorSlower         = "ETVDataFontColorSlower" // The font color for the data area, if a positive gap is displayed.
displayEveryXLaps       = 3                  // Show the Widget every x laps.
visibleTime             = 8.0                // Time in seconds to keep the Widget visible.
preferNextInFront       = false              // Whether to prefer next in front, even if next behind is closer.

[Widget::WearWidget1]
class                   = "net.ctdp.rfdynhud.widgets.wear.WearWidget" // The Java class, that defines the Widget.
positioning             = TOP_RIGHT          // The way, position coordinates are interpreted (relative to). Valid values: TOP_LEFT, TOP_CENTER, TOP_RIGHT, CENTER_LEFT, CENTER_CENTER, CENTER_RIGHT, BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT.
x                       = 0.5859375%         // The x-coordinate for the position.
y                       = 41.210938%         // The y-coordinate for the position.
width                   = 17.773438%         // The width. Use negative values to make the Widget be sized relative to screen size.
height                  = 24.414062%         // The height. Use negative values to make the Widget be sized relative to screen size.
border                  = "StandardBorder"   // The widget's border.
initialVisibility       = true               // The initial visibility.
backgroundColor         = "StandardBackground" // The Widget's background color in the format #RRGGBBAA (hex).
font                    = "StandardFont"     // The used font.
fontColor               = "StandardFontColor" // The Widget's font color in the format #RRGGBB (hex).
font2                   = "SmallerFont"      // The used (smaller) font.
displayEngine           = true               // Display the engine part of the Widget?
engineHeight            = 5.6640625%         // The height of the engine bar.
hundredPercentBase      = SAFE_RANGE         // The value range to be used as 100% base.
displayTires            = true               // Display the tire part of the Widget?
displayWearPercent      = true               // Display wear in percentage numbers?
displayCompoundName     = false              // Display the tire compound name in the header?
tireWidth               = 10.253906%         // The width of a tire image.
tireHeight              = 11.71875%          // The height of a tire image.
displayBrakes           = true               // Display the brakes of the Widget?
brakeWidth              = 6.7382812%         // The width of a brake image.
brakeHeight             = 17.773438%         // The height of a brake image.

[Widget::StandingsWidget1]
class                   = "net.ctdp.rfdynhud.widgets.standings.StandingsWidget" // The Java class, that defines the Widget.
positioning             = TOP_LEFT           // The way, position coordinates are interpreted (relative to). Valid values: TOP_LEFT, TOP_CENTER, TOP_RIGHT, CENTER_LEFT, CENTER_CENTER, CENTER_RIGHT, BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT.
x                       = 0.48828125%        // The x-coordinate for the position.
y                       = 59.570312%         // The y-coordinate for the position.
width                   = 27.539062%         // The width. Use negative values to make the Widget be sized relative to screen size.
height                  = 14.941406%         // The height. Use negative values to make the Widget be sized relative to screen size.
border                  = "StandardBorder"   // The widget's border.
initialVisibility       = true               // The initial visibility.
backgroundColor         = "StandardBackground" // The Widget's background color in the format #RRGGBBAA (hex).
font                    = "BiggerFont"       // The used font.
fontColor               = "StandardFontColor" // The Widget's font color in the format #RRGGBB (hex).
fontColor_me            = "#367727"          // The font color used for myself in the format #RRGGBB (hex).
fontColor_out           = "#646464"          // The font color used for retired drivers in the format #RRGGBB (hex).
fontColor_finished      = "#00FF00"          // The font color used for finished drivers in the format #RRGGBB (hex).
useAutoWidth            = true               // Automatically compute and display the width?
initialView             = RELATIVE_TO_ME     // the initial kind of standings view. Valid values: RELATIVE_TO_LEADER, RELATIVE_TO_ME.
forceLeaderDisplayed    = true               // Display leader regardless of maximum displayed drivers setting?
nameDisplayType         = FULL_NAME          // How to display driver names.
abbreviate              = false              // Whether to abbreviate "Stops", or not.
showLapsOrStops         = true               // Whether to show the number of laps or stops done or not.
showTopspeeds           = false              // Whether to show a topspeeds column or not.

[Widget::FuelWidget1]
class                   = "net.ctdp.rfdynhud.widgets.fuel.FuelWidget" // The Java class, that defines the Widget.
positioning             = TOP_RIGHT          // The way, position coordinates are interpreted (relative to). Valid values: TOP_LEFT, TOP_CENTER, TOP_RIGHT, CENTER_LEFT, CENTER_CENTER, CENTER_RIGHT, BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT.
x                       = 0.5859375%         // The x-coordinate for the position.
y                       = 65.72266%          // The y-coordinate for the position.
width                   = 17.773438%         // The width. Use negative values to make the Widget be sized relative to screen size.
height                  = 13.4765625%        // The height. Use negative values to make the Widget be sized relative to screen size.
border                  = "StandardBorder"   // The widget's border.
initialVisibility       = true               // The initial visibility.
backgroundColor         = "StandardBackground" // The Widget's background color in the format #RRGGBBAA (hex).
font                    = "StandardFont2"    // The used font.
fontColor               = "StandardFontColor" // The Widget's font color in the format #RRGGBB (hex).
font2                   = "StandardFont3"    // The used (smaller) font.
fuelFont                = "Monospaced-BOLD-13va" // The used font for fuel load.
fuelFontColor           = "#FFFFFFCD"        // The color to use for fuel load in the format #RRGGBB (hex).
roundUpRemainingLaps    = true               // Round up remaining fuel laps to include the current lap?
lowFuelWarningImagePositioning = TOP_RIGHT   // Positioning type for the low-fuel-warning image.
lowFuelWarningImagePositionX = 4px           // X-position for the low-fuel-warning image.
lowFuelWarningImagePositionY = 2px           // Y-position for the low-fuel-warning image.
lowFuelWarningImageHeight = 20.019531%       // Height for the low-fuel-warning image.
lowFuelBlinkTime        = 500                // Blink time in milli seconds for low fuel warning (0 to disable).

[Widget::RevMeterWidget1]
class                   = "net.ctdp.rfdynhud.widgets.revmeter.RevMeterWidget" // The Java class, that defines the Widget.
positioning             = BOTTOM_CENTER      // The way, position coordinates are interpreted (relative to). Valid values: TOP_LEFT, TOP_CENTER, TOP_RIGHT, CENTER_LEFT, CENTER_CENTER, CENTER_RIGHT, BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT.
x                       = 24.902344%         // The x-coordinate for the position.
y                       = 7.5195312%         // The y-coordinate for the position.
width                   = 16.308594%         // The width. Use negative values to make the Widget be sized relative to screen size.
height                  = 21.777344%         // The height. Use negative values to make the Widget be sized relative to screen size.
border                  = N/A                // The widget's border.
initialVisibility       = true               // The initial visibility.
font                    = "StandardFont"     // The used font.
fontColor               = "StandardFontColor" // The Widget's font color in the format #RRGGBB (hex).
backgroundImageName     = "default_rev_meter_bg.png" // The name of the background image.
needleImageName         = "default_rev_meter_needle.png" // The name of the needle image.
needleAxisBottomOffset  = 60                 // The offset in (unscaled) pixels from the bottom of the image, where the center of the needle's axis is.
rotationForZeroRPM      = 122.40001          // The rotation for the needle image, that is has for zero RPM (in degrees).
rotationForMaxRPM       = -118.8             // The rotation for the needle image, that is has for maximum RPM (in degrees).
displayRevMarkers       = true               // Display rev markers?
displayRevMarkerNumbers = true               // Display rev marker numbers?
revMarkersInnerRadius   = 224                // The inner radius of the rev markers (in background image space)
revMarkersLength        = 50                 // The length of the rev markers (in background image space)
revMarkersBigStep       = 1000               // Step size of bigger rev markers
revMarkersSmallStep     = 200                // Step size of smaller rev markers
revMarkersColor         = "#FFFFFF"          // The color used to draw the rev markers.
revMarkersMediumColor   = "#FFFF00"          // The color used to draw the rev markers for medium boost.
revMarkersHighColor     = "#FF0000"          // The color used to draw the rev markers for high revs.
fillHighBackground      = true               // Fill the rev markers' background with medium and high color instead of coloring the markers.
interpolateMarkerColors = false              // Interpolate medium and high colors.
revMarkersFont          = "Monospaced-BOLD-9v" // The font used to draw the rev marker numbers.
revMarkersFontColor     = "#FFFFFF"          // The font color used to draw the rev marker numbers.
numShiftLights          = 2                  // The number of shift lights to render.
shiftLightImageNameOff1 = "shiftlight_off.png" // The name of the shift light image for "off" state.
shiftLightImageNameOn1  = "shiftlight_on_red.png" // The name of the shift light image for "on" state.
shiftLightPosX1         = 625                // The x-offset in pixels to the gear label.
shiftLightPosY1         = 42                 // The y-offset in pixels to the gear label.
shiftLightRPM1          = -200               // The RPM (rounds per minute) to subtract from the maximum for the level to display shoft light on
shiftLightImageNameOff2 = "shiftlight_off.png" // The name of the shift light image for "off" state.
shiftLightImageNameOn2  = "shiftlight_on_orange.png" // The name of the shift light image for "on" state.
shiftLightPosX2         = 593                // The x-offset in pixels to the gear label.
shiftLightPosY2         = 42                 // The y-offset in pixels to the gear label.
shiftLightRPM2          = -600               // The RPM (rounds per minute) to subtract from the maximum for the level to display shoft light on
gearBackgroundImageName = ""                 // The name of the image to render behind the gear number.
gearPosX                = 354                // The x-offset in pixels to the gear label.
gearPosY                = 512                // The y-offset in pixels to the gear label.
gearFont                = "GearFont"         // The font used to draw the gear.
gearFontColor           = "#1A261C"          // The font color used to draw the gear.
displayBoostBar         = true               // Display a graphical bar for engine boost mapping?
boostBarPosX            = 135                // The x-position of the boost bar.
boostBarPosY            = 671                // The y-position of the boost bar.
boostBarWidth           = 438                // The width of the boost bar.
boostBarHeight          = 27                 // The height of the boost bar.
displayBoostNumber      = false              // Display a number for engine boost mapping?
boostNumberBackgroundImageName = ""          // The name of the image to render behind the boost number.
boostNumberPosX         = 392                // The x-position of the boost number.
boostNumberPosY         = 544                // The y-position of the boost number.
boostNumberFont         = "StandardFont"     // The font used to draw the boost number.
boostNumberFontColor    = "#FF0000"          // The font color used to draw the boost bar.
displayVelocity         = true               // Display velocity on this Widget?
velocityBackgroundImageName = "cyan_circle.png" // The name of the image to render behind the velocity number.
velocityPosX            = 100                // The x-offset in pixels to the velocity label.
velocityPosY            = 100                // The y-offset in pixels to the velocity label.
velocityFont            = "StandardFont"     // The font used to draw the velocity.
velocityFontColor       = "#1A261C"          // The font color used to draw the velocity.
displayRPMString1       = true               // whether to display the digital RPM/Revs string or not
displayCurrRPM1         = true               // whether to display the current revs or to hide them
displayMaxRPM1          = true               // whether to display the maximum revs or to hide them
rpmPosX1                = 170                // The offset in (background image space) pixels from the right of the Widget, where the text is to be placed.
rpmPosY1                = 603                // The offset in (background image space) pixels from the top of the Widget, where the text is to be placed.
rpmFont1                = "StandardFont"     // The font used to draw the RPM.
rpmFontColor1           = "StandardFontColor" // The font color used to draw the RPM.
rpmJoinString1          = " / "              // The String to use to join the current and max RPM.
displayRPMString2       = false              // whether to display the digital RPM/Revs string or not
displayCurrRPM2         = true               // whether to display the current revs or to hide them
displayMaxRPM2          = true               // whether to display the maximum revs or to hide them
rpmPosX2                = 170                // The offset in (background image space) pixels from the right of the Widget, where the text is to be placed.
rpmPosY2                = 603                // The offset in (background image space) pixels from the top of the Widget, where the text is to be placed.
rpmFont2                = "StandardFont"     // The font used to draw the RPM.
rpmFontColor2           = "StandardFontColor" // The font color used to draw the RPM.
rpmJoinString2          = " / "              // The String to use to join the current and max RPM.

[Widget::ETVTimingWidget1]
class                   = "net.ctdp.rfdynhud.etv2010.widgets.timing.ETVTimingWidget" // The Java class, that defines the Widget.
positioning             = TOP_LEFT           // The way, position coordinates are interpreted (relative to). Valid values: TOP_LEFT, TOP_CENTER, TOP_RIGHT, CENTER_LEFT, CENTER_CENTER, CENTER_RIGHT, BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT.
x                       = 0.48828125%        // The x-coordinate for the position.
y                       = 75.09766%          // The y-coordinate for the position.
width                   = 20.019531%         // The width. Use negative values to make the Widget be sized relative to screen size.
height                  = 8.496094%          // The height. Use negative values to make the Widget be sized relative to screen size.
border                  = N/A                // The widget's border.
initialVisibility       = true               // The initial visibility.
backgroundColor         = "ETVDataBackgroundColor" // The Widget's background color in the format #RRGGBBAA (hex).
font                    = "ETVFont"          // The used font.
fontColor               = "ETVDataFontColor" // The Widget's font color in the format #RRGGBB (hex).
captionBgColor          = "ETVCaptionBackgroundColor" // The background color for the "Lap" caption.
captionColor            = "ETVCaptionFontColor" // The font color for the "Lap" caption.
captionBgColor1st       = "ETVCaptionBackgroundColor1st" // The background color for the "Position" caption for first place.
dataBgColor1st          = "ETVDataBackgroundColor1st" // The background color for the data area, for first place.
dataBgColorFastest      = "ETVDataBackgroundColorFastest" // The background color for the data area, if a driver made the absolute fastest lap.
dataBgColorFaster       = "ETVDataBackgroundColorFaster" // The background color for the data area, if a negative gap is displayed.
dataBgColorSlower       = "ETVDataBackgroundColorSlower" // The background color for the data area, if a positive gap is displayed.
dataColorFastest        = "ETVDataFontColorFasterst" // The font color for the data area, if a driver made the absolute fastest lap.
dataColorFaster         = "ETVDataFontColorFaster" // The font color for the data area, if a negative gap is displayed.
dataColorSlower         = "ETVDataFontColorSlower" // The font color for the data area, if a positive gap is displayed.
positionFontSize        = 200                // Font size for the position in percent relative to the normal font size.
displayType             = AT_SECTORS         // Always display or just at sector boundaries or always if valid time was made?
visibleTimeBeforeSector = 7                  // The Widget is visible for the given amount of seconds before the relative sector time is reached.
visibleTimeAfterSector  = 7                  // The Widget is visible for the given amount after a sector was finished.

[Widget::ControlsWidget1]
class                   = "net.ctdp.rfdynhud.widgets.controls.ControlsWidget" // The Java class, that defines the Widget.
positioning             = BOTTOM_CENTER      // The way, position coordinates are interpreted (relative to). Valid values: TOP_LEFT, TOP_CENTER, TOP_RIGHT, CENTER_LEFT, CENTER_CENTER, CENTER_RIGHT, BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT.
x                       = -12.988281%        // The x-coordinate for the position.
y                       = 8.105469%          // The y-coordinate for the position.
width                   = 9.863281%          // The width. Use negative values to make the Widget be sized relative to screen size.
height                  = 16.503906%         // The height. Use negative values to make the Widget be sized relative to screen size.
border                  = "StandardBorder"   // The widget's border.
initialVisibility       = true               // The initial visibility.
backgroundColor         = "StandardBackground" // The Widget's background color in the format #RRGGBBAA (hex).
displayClutch           = true               // Display the clutch bar?
clutchColor             = "#0000FF"          // The color used for the clutch bar in the format #RRGGBB (hex).
displayBrake            = true               // Display the brake bar?
brakeColor              = "#FF0000"          // The color used for the brake bar in the format #RRGGBB (hex).
displayThrottle         = true               // Display the throttle bar?
throttleColor           = "#00FF00"          // The color used for the throttle bar in the format #RRGGBB (hex).
gap                     = 5                  // Gap between the bars

[Widget::TrackPositionWidget1]
class                   = "net.ctdp.rfdynhud.widgets.trackposition.TrackPositionWidget" // The Java class, that defines the Widget.
positioning             = BOTTOM_LEFT        // The way, position coordinates are interpreted (relative to). Valid values: TOP_LEFT, TOP_CENTER, TOP_RIGHT, CENTER_LEFT, CENTER_CENTER, CENTER_RIGHT, BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT.
x                       = 0.0%               // The x-coordinate for the position.
y                       = 0.0%               // The y-coordinate for the position.
width                   = 70.01953%          // The width. Use negative values to make the Widget be sized relative to screen size.
height                  = 5.859375%          // The height. Use negative values to make the Widget be sized relative to screen size.
border                  = "StandardBorder"   // The widget's border.
initialVisibility       = true               // The initial visibility.
backgroundColor         = "StandardBackground" // The Widget's background color in the format #RRGGBBAA (hex).
font                    = "PositionItemFont" // The used font.
fontColor               = "PositionItemFontColor" // The Widget's font color in the format #RRGGBB (hex).
itemRadius              = 9                  // The abstract radius for any displayed driver item.
markColorNormal         = "PositionItemColorNormal" // The color used for all, but special cars in #RRGGBBAA (hex).
markColorLeader         = "PositionItemColorLeader" // The color used for the leader's car in #RRGGBBAA (hex).
markColorMe             = "PositionItemColorMe" // The color used for your own car in #RRGGBBAA (hex).
markColorNextInFront    = "PositionItemColorNextInFront" // The color used for the car in front of you in #RRGGBBAA (hex).
markColorNextBehind     = "PositionItemColorNextBehind" // The color used for the car behind you in #RRGGBBAA (hex).
maxDisplayedVehicles    = 22                 // The maximum number of displayed vehicles.
displayPosNumbers       = true               // Display numbers on the position markers?
